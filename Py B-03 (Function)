      __3 Function__
•	A function is a mini program within a program. A major purpose of function is to group code that gets execute multiple time.



1--- def statements with parameters
•	Function ( parameter )  		
  When you call the print() or len() function, you pass in values, in this context, by typing them between the parentheses the values called arguments.
  parameter is a variable that an argument is store in when a function is call.

  def hello(name)		parameter = name.

  Note: The value stored in a parameter is forgotten when the function returns.



2--- Return value and Return statement  
  Return value:
•	len(‘hell’) = 4, 	4 is the return value of len function. The value(4) that function call evaluate to(4) is call return value of the function. 

  Return statement:
•	In def statement, you can specify what the return value should be with the return statement
  1.	The return keyword
  2.	The value or expression that the function should return.
  Remember, expressions are composed of values and operators. A function call can be used in an expression because it evaluates to its return value.



3--- The None value
  * In python there is a value called none, which represents the absences of a value.
  * Other programming language it is called (None = null, nil, undefined).

  print(None == print())
  >>> True

  Behind the scenes, Python adds return None to the end of any function definition with no return statement. This is similar to how a while or for loop implicitly ends with a continue statement. Also, if you use a return statement without a value:
  def name():
    return
  print(name())
  >>> None
 (that is, just the return keyword by itself), then None is returned.



4---- Keyword argument and print()
  Value = Argument (inside the function)
  Keyword argument are identified by the keyword put before them in the function call. Keyword argument are often used for optional parameters.
  Example: print() function has optional parameters [end , sep ]

    # End keyword argument:
  print('Hello', end='')
  print('world')
  >>> Helloworld

    # When you pass multiple string value to print(), the function will automatically separate them with a single space.
    print('cat', 'dog', 'mic')
    >>> cat dog mic
 
    # Sep keyword argument:
    print('cat', 'dog', 'mic', sep=',')
    >>> cat,dog,mic
  [ some functions have optional keyword argument that can be specified when the function call.]



5---- Local and Global scope
    # Global 	  = outside of the function.
    x = 'global x'

    # Local	=  the inside of function.
  def local_var():
    x = 'local x'
    print(x)

  local_var() # local scope
  print(x)    # global scope

    # Enclosing  = function within function. First function used enclosing variable, second function used local variable.
    y = 'global y'
    def enclosing_var():
    y = 'eonclosing y'
    def loc():
        y = 'local y'
        print(y)
    loc()    
    print(y)

  print(y)
  enclosing_var()

    # Built-in	 = python built-in function like sum()…
  list1 = [1,2,4]
  my_var = sum(list1)
  print(my_var)

  def sum():			# Do not use same name 
    print('Hello')
  sum()
  print()

  # Local variable perform as global variable
  x = 'x1'

  def my_func():
    global x
    x = 'x2'
  print(x)
  print(x)
  my_func()
  print(x)

        ### L > E > G > B Rule:

        name = 'amirul' # global
        def my_fun():
            # name = 'Mainul' # enclosing
            def my_fun2():
                # name = 'Atia'   # local
                print(name)
            my_fun2()

        my_fun()

  ### Global = outside of the function.
  ### Local = in the inside of function.
  ### Enclosing = function within function. First function used enclosing variable, second function used local variable.
  ### Built-in = python built-in function like sum()…

  Think of a scope as a container for variables. When a scope is destroyed, all the values stored in the scope’s variables are forgotten.
  •	Code in the global scope cannot use any local variables.
  •	However, a local scope can access global variables
  •	Code in a function’s local scope cannot use variables in any other local scope.
  •	You can use the same name for different variables if they are in different scopes.

  Local variables cannot be used in the Global scope.
  Local scope cannot use variable in other Local scope.
  Global variables can be read from a local scope.
  Local and Global variables with the same name.



6---- The Global statement
  def spam():
    global egg
    egg = 'spam'

  egg = 'global'
  spam()
  print(egg)
  >>>spam



7---- Exception handling
  Try and except
  def spam(divide):
    try:
        return 42/divide
    except ZeroDivisionError:
        print('Error: invalid argument.')
 
  print(spam(2))
  print(spam(12))
  print(spam(0))
  print(spam(1))

### Note: once the execution jumps to the code in the except clause, it does not return to the try clause. Instead, it just continues moving down as normal



8---- A sort program: guess the number

